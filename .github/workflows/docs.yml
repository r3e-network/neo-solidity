name: Documentation

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # ================================
  # Documentation Build & Deploy
  # ================================
  docs-build:
    name: Build Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install documentation tools
      run: |
        npm install -g @vuepress/cli
        npm install -g typedoc
        npm install -g jsdoc
    
    - name: Setup Rust for docs
      uses: dtolnay/rust-toolchain@stable
    
    - name: Setup .NET for docs
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: '6.0.x'
    
    - name: Generate Rust documentation
      run: |
        echo "Generating Rust API documentation..."
        cargo doc --no-deps --document-private-items
        
        # Create docs directory
        mkdir -p docs/api/rust
        cp -r target/doc/* docs/api/rust/ 2>/dev/null || true
    
    - name: Generate TypeScript documentation
      run: |
        echo "Generating TypeScript API documentation..."
        cd tooling
        npm install
        
        # Generate TypeScript docs
        npx typedoc --out ../docs/api/typescript src/
    
    - name: Generate C# documentation
      run: |
        echo "Generating C# API documentation..."
        cd src/Neo.Sol.Runtime
        
        # Generate XML documentation
        dotnet build --configuration Release /p:GenerateDocumentationFile=true
        
        # Create docs structure
        mkdir -p ../../docs/api/csharp
        find . -name "*.xml" -exec cp {} ../../docs/api/csharp/ \; 2>/dev/null || true
    
    - name: Create documentation index
      run: |
        mkdir -p docs
        
        cat > docs/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Neo Solidity Compiler Documentation</title>
            <style>
                body { 
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    max-width: 1200px; 
                    margin: 0 auto; 
                    padding: 20px;
                    line-height: 1.6;
                    color: #333;
                }
                .header { 
                    text-align: center; 
                    margin-bottom: 40px;
                    padding: 40px 0;
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    border-radius: 10px;
                }
                .grid { 
                    display: grid; 
                    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); 
                    gap: 20px; 
                    margin: 40px 0;
                }
                .card { 
                    border: 1px solid #ddd; 
                    border-radius: 8px; 
                    padding: 20px;
                    background: #f9f9f9;
                    transition: transform 0.2s;
                }
                .card:hover { 
                    transform: translateY(-2px);
                    box-shadow: 0 4px 12px rgba(0,0,0,0.15);
                }
                .card h3 { 
                    margin-top: 0; 
                    color: #5a67d8;
                }
                a { 
                    color: #5a67d8; 
                    text-decoration: none; 
                }
                a:hover { 
                    text-decoration: underline; 
                }
                .footer {
                    text-align: center;
                    margin-top: 60px;
                    padding-top: 40px;
                    border-top: 1px solid #ddd;
                    color: #666;
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1>Neo Solidity Compiler</h1>
                <p>Complete Documentation & API Reference</p>
                <p><strong>Author:</strong> Jimmy &lt;jimmy@r3e.network&gt;</p>
            </div>
            
            <div class="grid">
                <div class="card">
                    <h3>üìö User Guides</h3>
                    <ul>
                        <li><a href="../README.md">Getting Started</a></li>
                        <li><a href="../CONTRIBUTING.md">Contributing Guide</a></li>
                        <li><a href="../devpack/DEVPACK_GUIDE.md">Devpack Guide</a></li>
                        <li><a href="../DEPLOYMENT_VALIDATION.md">Deployment Guide</a></li>
                    </ul>
                </div>
                
                <div class="card">
                    <h3>üîß API Documentation</h3>
                    <ul>
                        <li><a href="api/rust/neo_solidity/index.html">Rust Compiler API</a></li>
                        <li><a href="api/typescript/index.html">TypeScript Tooling API</a></li>
                        <li><a href="api/csharp/index.html">C# Runtime API</a></li>
                    </ul>
                </div>
                
                <div class="card">
                    <h3>üé® Examples</h3>
                    <ul>
                        <li><a href="../examples/ERC20Token.sol">ERC20 Token</a></li>
                        <li><a href="../examples/ERC721Token.sol">ERC721 NFT</a></li>
                        <li><a href="../devpack/examples/CompleteNEP17Token.sol">Advanced NEP-17</a></li>
                        <li><a href="../devpack/examples/CompleteNEP11NFT.sol">Advanced NEP-11</a></li>
                    </ul>
                </div>
                
                <div class="card">
                    <h3>üìä Analysis Reports</h3>
                    <ul>
                        <li><a href="../CODE_ANALYSIS_REPORT.md">Code Analysis</a></li>
                        <li><a href="../PRODUCTION_READINESS_AUDIT.md">Production Audit</a></li>
                        <li><a href="../ZERO_PLACEHOLDERS_CERTIFICATION.md">Quality Certification</a></li>
                        <li><a href="../FINAL_PRODUCTION_CERTIFICATION.md">Production Certification</a></li>
                    </ul>
                </div>
                
                <div class="card">
                    <h3>üöÄ Quick Start</h3>
                    <pre><code># Install Neo Solidity Compiler
curl -L https://github.com/r3e-network/neo-solidity/releases/latest/download/neo-solc-linux-x64 -o neo-solc
chmod +x neo-solc

# Compile Solidity to Neo N3
./neo-solc MyContract.sol -o MyContract

# Deploy to Neo blockchain
neo-cli contract deploy MyContract.nef MyContract.manifest.json</code></pre>
                </div>
                
                <div class="card">
                    <h3>üîó Resources</h3>
                    <ul>
                        <li><a href="https://github.com/r3e-network/neo-solidity">GitHub Repository</a></li>
                        <li><a href="https://github.com/r3e-network/neo-solidity/releases">Releases</a></li>
                        <li><a href="https://github.com/r3e-network/neo-solidity/issues">Issues & Support</a></li>
                        <li><a href="mailto:jimmy@r3e.network">Contact Author</a></li>
                    </ul>
                </div>
            </div>
            
            <div class="footer">
                <p><strong>Neo Solidity Compiler</strong> - Bringing Ethereum's developer ecosystem to Neo blockchain</p>
                <p>Built with ‚ù§Ô∏è by <strong>R3E Network</strong></p>
                <p><a href="https://r3e.network">r3e.network</a> ‚Ä¢ <a href="mailto:jimmy@r3e.network">jimmy@r3e.network</a></p>
            </div>
        </body>
        </html>
        EOF
    
    - name: Validate documentation links
      run: |
        echo "Validating documentation structure..."
        
        # Check all markdown files exist
        test -f README.md || exit 1
        test -f CONTRIBUTING.md || exit 1
        test -f devpack/DEVPACK_GUIDE.md || exit 1
        test -f DEPLOYMENT_VALIDATION.md || exit 1
        
        echo "‚úÖ Documentation structure validated"
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        force_orphan: true
        user_name: 'github-actions[bot]'
        user_email: 'github-actions[bot]@users.noreply.github.com'
        commit_message: 'Deploy documentation'

  # ================================
  # Documentation Quality Check
  # ================================
  docs-quality:
    name: Documentation Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install documentation tools
      run: |
        npm install -g markdownlint-cli
        npm install -g markdown-link-check
        npm install -g alex  # Inclusive writing checker
    
    - name: Lint markdown files
      run: |
        echo "# Documentation Quality Report" > docs_quality.md
        echo "" >> docs_quality.md
        echo "**Date**: $(date)" >> docs_quality.md
        echo "" >> docs_quality.md
        
        echo "## Markdown Linting Results" >> docs_quality.md
        
        # Lint all markdown files
        MARKDOWN_FILES=$(find . -name "*.md" -not -path "./target/*" -not -path "./node_modules/*")
        
        for file in $MARKDOWN_FILES; do
          echo "### $(basename $file)" >> docs_quality.md
          
          if markdownlint "$file" > /dev/null 2>&1; then
            echo "‚úÖ No linting issues" >> docs_quality.md
          else
            echo "‚ö†Ô∏è Linting issues found:" >> docs_quality.md
            markdownlint "$file" >> docs_quality.md 2>&1 || true
          fi
          echo "" >> docs_quality.md
        done
    
    - name: Check link validity
      run: |
        echo "## Link Validation Results" >> docs_quality.md
        echo "" >> docs_quality.md
        
        # Check links in key documentation files
        KEY_DOCS=("README.md" "CONTRIBUTING.md" "devpack/README.md" "devpack/DEVPACK_GUIDE.md")
        
        for doc in "${KEY_DOCS[@]}"; do
          if [ -f "$doc" ]; then
            echo "### $doc" >> docs_quality.md
            
            if markdown-link-check "$doc" > link_check_$$.txt 2>&1; then
              DEAD_LINKS=$(grep -c "‚úñ" link_check_$$.txt || echo 0)
              if [ "$DEAD_LINKS" -eq 0 ]; then
                echo "‚úÖ All links valid" >> docs_quality.md
              else
                echo "‚ö†Ô∏è $DEAD_LINKS dead links found" >> docs_quality.md
              fi
            else
              echo "‚úÖ Link check completed" >> docs_quality.md
            fi
            echo "" >> docs_quality.md
          fi
        done
    
    - name: Check inclusive language
      run: |
        echo "## Inclusive Language Check" >> docs_quality.md
        echo "" >> docs_quality.md
        
        # Check for inclusive language
        DOCS_TO_CHECK=("README.md" "CONTRIBUTING.md" "CODE_ANALYSIS_REPORT.md")
        
        for doc in "${DOCS_TO_CHECK[@]}"; do
          if [ -f "$doc" ]; then
            echo "### $doc" >> docs_quality.md
            
            if alex "$doc" > alex_output_$$.txt 2>&1; then
              echo "‚úÖ No language issues detected" >> docs_quality.md
            else
              ISSUES=$(grep -c "warning" alex_output_$$.txt || echo 0)
              echo "‚ÑπÔ∏è $ISSUES potential language improvements suggested" >> docs_quality.md
            fi
          fi
        done
        echo "" >> docs_quality.md
        
        echo "## Documentation Statistics" >> docs_quality.md
        TOTAL_DOCS=$(find . -name "*.md" -not -path "./target/*" | wc -l)
        TOTAL_WORDS=$(find . -name "*.md" -not -path "./target/*" -exec wc -w {} + | tail -1 | awk '{print $1}')
        TOTAL_LINES=$(find . -name "*.md" -exec wc -l {} + | tail -1 | awk '{print $1}')
        
        echo "- **Total Documentation Files**: $TOTAL_DOCS" >> docs_quality.md
        echo "- **Total Words**: $TOTAL_WORDS" >> docs_quality.md
        echo "- **Total Lines**: $TOTAL_LINES" >> docs_quality.md
        echo "- **Average Words per File**: $((TOTAL_WORDS / TOTAL_DOCS))" >> docs_quality.md
        
        cat docs_quality.md
    
    - name: Upload documentation quality report
      uses: actions/upload-artifact@v4
      with:
        name: documentation-quality-report
        path: docs_quality.md